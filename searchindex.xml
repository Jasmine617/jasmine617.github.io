<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>Python中print小结</title><url>https://jasmine617.github.io/post/python-print/</url><categories><category>CS</category></categories><tags><tag>Python</tag></tags><content type="html"> 对Python中print函数的使用进行总结。包括：
print方法的基本语法格式。 使用多种方式进行打印格式化。 print语法格式 print()函数具有丰富的功能，详细语法格式如下：
print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False) 除了待打印输出的value，其他可选关键字参数如下：
file：类文件对象（stream），默认为当前的sys.stdout，即打印到屏幕上。如果指定一个文件，则打印输出到文件中。 sep：打印多个value时，在值之间插入的分隔字符串，默认为空格。 end：在最后一个值后附加的字符串，默认为换行符。 flush：控制输出缓存，一般为了可以获得较好的性能，保持为False即可。 样例代码：
# 在屏幕上打印一个字符串 print('hello world') # 打印输出到文件中 fp=open('D:/PycharmProjects/testfile.txt', 'a+') print('hello world', file=fp) fp.close() #打印多个字符串，用逗号分隔 print('hello world', 'python') #打印多个字符串，并设置参数间的分隔符 print('hello world', 'python', sep='|') # 使用加号，打印一个计算公式计算结果 print(3+1) # 使用加号，连接打印多个字符串 print('hello world'+'python') # 打印后不换行，设置和下一次打印间的分隔符 print('春风得意马蹄疾', end=' ') print('一夜看尽长安花') print('行到水穷处', end='\t') print('坐看云起时') print('--------------------------------------') # 待打印字符串中包含转义符 print('hello\tworld') print('hello\nworld') print('\'aaa\'') # 待打印字符串中包含字体颜色设置 print('\033[0:31:47m试试颜色\033[0m') print('\033[4;31m试试颜色\033[0m') print('--------------------------------------') 测试结果：
hello world hello world python hello world|python 4 hello worldpython 春风得意马蹄疾 一夜看尽长安花 行到水穷处 坐看云起时 -------------------------------------- hello world hello world 'aaa' 使用%进行数据格式化 print() 函数使用以%开头的转换说明符，对各种类型的数据进行格式化输出。
符号 描述 %c 格式化字符及其ASCII码 %s 格式化字符串 %d 格式化整数 %u 格式化无符号整型 %o 格式化无符号八进制数 %x 格式化无符号十六进制数 %X 格式化无符号十六进制数（大写） %f 格式化浮点数字，可指定小数点后的精度 %e 用科学计数法格式化浮点数 %E 作用同%e，用科学计数法格式化浮点数 %g %f和%e的简写 %G %f 和 %E 的简写 %p 用十六进制数格式化变量的地址 在使用上述转换说明符时，还可以添加辅助指令：
符号 功能 * 定义宽度或者小数点精度 - 用做左对齐 + 在正数前面显示加号( + ) 在正数前面显示空格 # 在八进制数前面显示零(&lsquo;0&rsquo;)，在十六进制前面显示'0x&rsquo;或者'0X' 0 显示的数字前面填充'0&rsquo;而不是默认的空格 % &lsquo;%%&lsquo;输出一个单一的&rsquo;%&rsquo; m.n m 是显示的最小总宽度,n 是小数点后的位数 样例代码（格式化整数）：
# 格式化整数 num = 9855 print('这里有一个整数：%d'%num) #未定义数字宽度，按实际位数显示 print('这里有一个整数：%8d'%num) #定义数据宽度为8，不足的在左侧留空格 print('这里有一个整数：%08d'%num) #定义数据宽度为8，不足的在左侧用0补齐 print('这里有一个整数：%-08d'%num) #左对齐，数字后空格补齐8位 print('这里有一个整数：%03d'%num) #实际位数大于3，则按实际显示 print('这里有一个整数：%0*d'%(6,num)) #用*从后面的元组中获取宽度 print('这里有一个整数：%+08d'%num) #显示正负号 print('--------------------------------------') 测试结果：
这里有一个整数：9855 这里有一个整数： 9855 这里有一个整数：00009855 这里有一个整数：9855 这里有一个整数：9855 这里有一个整数：009855 这里有一个整数：+0009855 样例代码（转换整数的进制）：
# 显示整数的其他进制 print('它的八进制是：%o'%num) #显示八进制格式 print('它的八进制是：%#o'%num) #在八进制前显示0o print('它的十六进制是：%x'%num) #显示小写十六进制 print('它的十六进制是：%#X'%num) #显示大写十六进展，并在前面表示0X print('-------------') # 未使用格式化时，还可以使用函数进行进制转换 print('它的二进制是：',bin(num)) print('它的八进制是：',oct(num)) print('它的十六进制是：',hex(num)) print('--------------------------------------') 测试结果：
它的八进制是：23177 它的八进制是：0o23177 它的十六进制是：267f 它的十六进制是：0X267F ------------- 它的二进制是： 0b10011001111111 它的八进制是： 0o23177 它的十六进制是： 0x267f 样例代码（格式化浮点数）：
# 格式化浮点数 pi = 3.141592653 print('这是一个浮点数：%10.3f' % pi) #数字宽度为10，精度3 print("这是一个浮点数：%*.*f" % (8,3,pi)) #用*从后面的元组中读取字段宽度和精度 print("这是一个浮点数：%.*f" % (3,pi)) #用*从后面的元组中读取字段精度 print('这是一个浮点数：%010.3f' % pi) #用0填充空白 print('这是一个浮点数：%-10.3f' % pi) #左对齐，数字后面有5个占位的空格 print('这是一个浮点数：%+f' % pi) #显示正负号 测试结果：
这是一个浮点数： 3.142 这是一个浮点数： 3.142 这是一个浮点数：3.142 这是一个浮点数：000003.142 这是一个浮点数：3.142 这是一个浮点数：+3.141593 样例代码（格式化字符串）：
# 格式化字符串 name = "Jasmine" print('My name is：%s'%name) print('My name is：%10s'%name) 测试结果：
My name is：Jasmine My name is： Jasmine 使用format函数进行格式化 相对基本格式化输出采用‘%’的方法，format()功能更强大。
格式为：
print('{&lt;参数序号>:&lt;格式控制标记>}xxxxx{}xxxxxxxxx{}'.format(参数1, 参数2, 参数3)) 上述示例中：
xxxxx为静态内容，print直接输出。 每对{}对应一个参数，print输出时，将被format后定义的参数的值替换。 每对{}可以定义序号（例如{0}、{1}），也可以不定义。不定义时默认依次定义为{0}，{1}。 每对{}内可以定义辅助指令，辅助指令放置在:后，其格式为&lt;填充>&lt;对齐>&lt;宽度>&lt;,>&lt;.精度>&lt;类型> &lt;填充>：当输出宽度大于参数宽度时，显示的填充符号。如果不设置，则默认用空格填充。 &lt;对齐>：&lt;左对齐，>右对齐，^居中。默认为右对齐。 &lt;宽度>：参数输出时的总占位宽度。 &lt;,>：对于整数和浮点数，是否显示千位分隔符。 &lt;.精度>：浮点数的小数点后位数。 &lt;类型>：c、s、d、f等，对应输出参数的数据类型。 样例代码：
# 使用format格式化 name = '小明' age = 12 height = 1.5678 print('他是{}，今年{}岁，身高是{}米。'.format(name, age, height)) #{}中未定义参数序号，直接依次与format中的参数匹配 print('他是{0}，今年{2}岁，身高是{1}米。'.format(name, height, age)) #{}中标识参数序号，即为format中的参数顺序 print('他是{:^6}，今年{:04}岁，身高是{:.2f}米。'.format(name, age, height)) #name占10位并居中显示，age占4位空位用0填充，height保留2位小数 print('--------------------------------------') 测试结果：
他是小明，今年12岁，身高是1.5678米。 他是小明，今年12岁，身高是1.5678米。 他是 小明 ，今年0012岁，身高是1.57米。 使用f进行格式化 在print中使用f，则在打印输出时，会直接返回{}中定义的表达式结果。相比前面两种格式化方式，这种写法代码最简洁。
格式为：
print(f'xxxx{&lt;参数名>:&lt;格式控制标记>}xxxxx{参数名}xxxxxxxxx{参数名}') 上述示例中：
xxxxx为静态内容，print直接输出。 每对{}对应一个参数，需要定义参数名；print输出时，将显示为该参数的值。 每对{}内可以定义辅助指令，辅助指令放置在:后，其格式为&lt;填充>&lt;对齐>&lt;宽度>&lt;,>&lt;.精度>&lt;类型>，具体规则和format方法一致。 样例代码：
# 使用f格式化 print(f'他是{name}，今年{age}岁，身高是{height}米。') #{}中定义参数名 print(f'他是{name:^6}，今年{age:04}岁，身高是{height:.2f}米。') print('--------------------------------------') 测试结果：
他是小明，今年12岁，身高是1.5678米。 他是 小明 ，今年0012岁，身高是1.57米。</content></entry><entry><title>Python中list、tuple、dict和set的对比小结</title><url>https://jasmine617.github.io/post/python-list/</url><categories><category>CS</category></categories><tags><tag>Python</tag></tags><content type="html"> 对Python中list、turple、dict和set这四种数据类型进行对比总结。
概览 列表list 元组tuple 字典dict 集合set 读写要求 读写 只读 只读 读写 读取方式 索引 索引 键key 只能遍历 值是否重复 是 是 键不能重复，值可以 否 数据存储 连续、静态 连续、静态 不连续、动态 不连续、动态 是否有序 是 是 否（自动正序） 否 初始化 [lvalue1, lvalue2] (tvalue1, tvalue2) {key1:value1, key2:value2} {svalue1, svalue2} 增 list.append(value) 只读 dict[key1] = value1 set.add(value1) 删 del list[2] 只读 del dict[key] set.remove(value1) 改 list[2]=newValue 只读 dict[key1] = newValue set.update(value) 查 list[2:] tuple[1:5] dict[key] value in set 应用场景 非结构化数据存储 稳定的数据存储 结构化数据存储 数据剔重 列表 列表是一组有序存储的数据，它的特性包括：
用中括号将元素括起来，元素之间有逗号隔开。
列表可存储任意类型的数据，列表中各元素的类型可以不同，列表中各元素的值可以重复。
列表数据按顺序存储（链式存储），每个元素都有索引，支持正序、倒序两种索引，正序索引从0开始，倒序索引从-1开始。
列表创建后，其中的数据可以修改。
样例代码：
# 定义列表 list_t1 = ['I', 'love', 'use', 'python', [1, 2, 'a']] list_t2 = list(["C语言中文网", "http://c.biancheng.net"]) print('list_t1:', list_t1) print('list_t2:', list_t2) # 将字符串转换成列表 list_t3 = list("hello") print('list_t3:', list_t3) # 将元组转换成列表 tuple1 = ('Python', 'Java', 'C++', 'JavaScript') list_t4 = list(tuple1) print('list_t4:', list_t4) # 将字典转换成列表 dict1 = {'a':100, 'b':42, 'c':9} list_t5 = list(dict1) print('list_t5:', list_t5) #将区间转换成列表 range1 = range(1, 6) list_t6 = list(range1) print('list_t6:', list_t6) #创建空列表 print(list()) print('--------------------------------------') # 获取list长度 # print('list length:%d'.format(len(list_t1))) print('length of list_t1:', len(list_t1)) print('--------------------------------------') # 判断列表中是否包含某元素 print('python is in list_t1:', ('python' in list_t1)) print('Python is in list_t1:', ('Python' in list_t1)) print('--------------------------------------') # 按索引获取list中某个元素的值 print('the first element of list_t1:', list_t1[0]) print('the last element of list_t1:', list_t1[-1]) print('the last element of list_t1:', list_t1[len(list_t1)-1]) # 切片，按索引获取list中某几个元素的值,注意左闭右开 print('the first three elements of list_t1:', list_t1[0:3]) print('the first three elements of list_t1:', list_t1[:3]) print('the last two elements of list_t1:', list_t1[-2:]) print('every two elements of list_t1:', list_t1[0:5:2]) print('--------------------------------------') # 根据元素值定位元素在列表中的index索引位置 print('index of python in list_t1：', list_t1.index('python')) print('--------------------------------------') # 统计某个值在列表元素中的个数 print('quantity of python in list_t1：', list_t1.count('python')) print('quantity of Python in list_t1：', list_t1.count('Python')) print('--------------------------------------') # 在list最后追加元素 list_t1.append('too') print('After append, list_t1:', list_t1) # 在list中间插入元素 list_t1.insert(1, 'really') print('After insert, list_t1:',list_t1) # 把一个list添加到另一个list中 list_t5.extend(list_t6) print('After extend, list_t5:',list_t5) # 合并两个list list_t7 = list_t3 + list_t4 print('After join list_t3 and list_t4:',list_t7) print('--------------------------------------') # 修改list中的元素 list_t1[-3] = 'java' print('modify list_t1:', list_t1) list_t1[4:7] = ['python', 'haha'] print('modify list_t1:', list_t1) print('--------------------------------------') # 删除list中的元素 del list_t1[1] print('delete element by index， list_t1:', list_t1) list_t1.pop() print('delete the last element， list_t1:', list_t1) list_t1.remove('love') print('delete element by value， list_t1:', list_t1) print('--------------------------------------') # 遍历列表 print('print the elements of list_t1 one by one:',end=' ') for i in range(len(list_t1)): print(list_t1[i], end=' ') print('\n--------------------------------------') # 同时遍历列表的索引和对应值 print('同时遍历列表的索引和对应值') for index, value in enumerate(list_t1): print('index: {0}value: {1}'.format(index, value)) print('--------------------------------------') # 排序 list_t1.sort() print('sort List_t1:', list_t1) list_t1.reverse() print('reverse List_t1:', list_t1) print('--------------------------------------') 测试结果：
list_t1: ['I', 'love', 'use', 'python', [1, 2, 'a']] list_t2: ['C语言中文网', 'http://c.biancheng.net'] list_t3: ['h', 'e', 'l', 'l', 'o'] list_t4: ['Python', 'Java', 'C++', 'JavaScript'] list_t5: ['a', 'b', 'c'] list_t6: [1, 2, 3, 4, 5] [] -------------------------------------- length of list_t1: 5 -------------------------------------- python is in list_t1: True Python is in list_t1: False -------------------------------------- the first element of list_t1: I the last element of list_t1: [1, 2, 'a'] the last element of list_t1: [1, 2, 'a'] the first three elements of list_t1: ['I', 'love', 'use'] the first three elements of list_t1: ['I', 'love', 'use'] the last two elements of list_t1: ['python', [1, 2, 'a']] every two elements of list_t1: ['I', 'use', [1, 2, 'a']] -------------------------------------- index of python in list_t1： 3 -------------------------------------- quantity of python in list_t1： 1 quantity of Python in list_t1： 0 -------------------------------------- After append, list_t1: ['I', 'love', 'use', 'python', [1, 2, 'a'], 'too'] After insert, list_t1: ['I', 'really', 'love', 'use', 'python', [1, 2, 'a'], 'too'] After extend, list_t5: ['a', 'b', 'c', 1, 2, 3, 4, 5] After join list_t3 and list_t4: ['h', 'e', 'l', 'l', 'o', 'Python', 'Java', 'C++', 'JavaScript'] -------------------------------------- modify list_t1: ['I', 'really', 'love', 'use', 'java', [1, 2, 'a'], 'too'] modify list_t1: ['I', 'really', 'love', 'use', 'python', 'haha'] -------------------------------------- delete element by index， list_t1: ['I', 'love', 'use', 'python', 'haha'] delete the last element， list_t1: ['I', 'love', 'use', 'python'] delete element by value， list_t1: ['I', 'use', 'python'] -------------------------------------- print the elements of list_t1 one by one: I use python -------------------------------------- 同时遍历列表的索引和对应值 index: 0 value: I index: 1 value: use index: 2 value: python -------------------------------------- sort List_t1: ['I', 'python', 'use'] reverse List_t1: ['use', 'python', 'I'] -------------------------------------- 元组 元组是一组有序存储的数据，它的特性包括：
用小括号将元素括起来，元素之间有逗号隔开。
元组可存储任意类型的数据，元组中各元素的类型可以不同，元组中各元素的值可以重复。
元组数据按顺序存储（链式存储），每个元素都有索引，支持正序、倒序两种索引，正序索引从0开始，倒序索引从-1开始。
元组一经初始化，数据不能修改。
与列表相比，元组是不可变的，这使得它可以作为字典的 key，或者扔进集合里。元组放弃了对元素的增删，换取的是性能上的提升：创建元组比列表快，存储空间比列表占用更小。多线程并发的时候，元组是不需要加锁的，不用担心安全问题，编写也简单多了。
样例代码：
# 元组和列表一样，支持获取长度函数len、使用索引获取元素、切片、for和range遍历、for和enumerate遍历，以及in、not in判断。 # 由于元组的内容不能修改，他不支持增删改方法,也不支持sort和reverse排序方法。 # 可以将元组先转化为列表，排序后再转化回元组，间接实现元组排序。 tuple_t1 = ('banana', 'color', 'apple', 'dark') tmp_l1 = list(tuple_t1) tmp_l1.sort() tuple_t1 = tuple(tmp_l1) for index, value in enumerate(tuple_t1): print('index:%dvalue:%s' % (index, value)) print('--------------------------------------') 测试结果：
index:0 value:apple index:1 value:banana index:2 value:color index:3 value:dark -------------------------------------- 字典 字典是一组无序存储的key-value键值对，它的特性包括：
用大括号将元素括起来，每个元素包含一个键和一个值，键和值用冒号分隔，元素之间有逗号隔开。 字典中的键key可以是数字、字符串或者是元组等不可变类型；字典中的值value可以是任何数据类型。 字典中的键key是大小写敏感的，不能重复。可使用key，获取字典中对应的value。 字典根据key计算其保存位置（哈希算法），所以其内部存放顺序与key放入顺序无关。 与列表相比：字典的查找和插入的速度极快，不会随着key的增加而变慢；但字典需要占用大量的内存，内存浪费多。 样例代码：
# 直接定义字典 dict1 = {'name': '小明', 'sex': 'male', 'age': 18, 'high': 180} print('dict1:', dict1) print('--------------------------------------') # 使用dict和zip，将两个列表、元组或者字符串转为字典 print('use dict and zip') list1 = ['key1','key2','key3'] list2 = ['1','2','3'] dict2 = dict(zip(list1,list2)) print('dict2:', dict2) print('-------------') tuple1 = ('key1','key2','key3') tuple2 = ('1','2','3') dict2 = dict(zip(tuple1,tuple2)) print('dict2:', dict2) print('-------------') str1 = 'abcde' str2 = '12345' dict2 = dict(zip(str1,str2)) print('dict2:', dict2) print('--------------------------------------') # 使用dict，将嵌套列表或者元组映射转化为字典的key和value print('use dict') list3 = [['key1','value1'],['key2','value2'],['key3','value3']] dict3 = dict(list3) print('dict3:', dict3) print('-------------') list4 = [('key1','value1'),('key2','value2'),('key3','value3')] dict3 = dict(list4) print('dict3:', dict3) print('-------------') tuple3 = (['key1','value1'],['key2','value2'],['key3','value3']) dict3 = dict(tuple3) print('dict3:', dict3) print('-------------') tuple4 = (('key1','value1'),('key2','value2'),('key3','value3')) dict3 = dict(tuple4) print('dict3:', dict3) print('--------------------------------------') # 使用fromkeys方法创建字典 print('use fromkeys') list5 = ['语文', '数学', '英语'] dict4 = dict.fromkeys(list5) print('dict4:', dict4) dict4 = dict.fromkeys(list5, 60) print('dict4:', dict4) print('--------------------------------------') # 字典的key和value互转 dict5 = {value:key for key, value in dict2.items()} print('switch key and value of dict2:', dict5) print('--------------------------------------') # 获取dict的元素个数 print('length of dict1:', len(dict1)) print('--------------------------------------') # 判断字典中是否包含某元素 print('name is in dict1:', ('name' in dict1)) print('Name is in dict1:', ('Name' in dict1)) print('--------------------------------------') # 通过键访问元素,使用get方法避免key不存在时的异常 print('get value by key(name), dict1:', dict1['name']) print('get value by key(name), dict1:', dict1.get('name')) print('get value by key(school), dict1:', dict1.get('school')) print('get value by key(school), dict1:', dict1.get('school', 'haha')) print('--------------------------------------') # 添加单个元素 dict1['score'] = 100 print('add key(score), dict1:', dict1) # 添加多个元素（合并两个字典) dict8 = {'country': 'china', 'city': 'Beijing'} dict1.update(dict8) print('add dict8 to dict1:', dict1) # 修改单个元素的value dict1['score'] = 80 print('modify value of key(score), dict1:', dict1) #更新多个元素的值 dict1.update(name='王四', age=40) print('modify values, dict1:', dict1) # 设置默认 dict1.setdefault('score', 90) print('set default value, dict1:', dict1) dict1.setdefault('job', 'Stu') print('set default value, dict1:', dict1) print('--------------------------------------') # 字典删除 dict1.pop('score') print('delete key(score):', dict1) del dict1['country'] print('delete key(country):', dict1) dict1.popitem() print('delete the last key:', dict1) dict2.clear() print('clear dict2:', dict2) print('--------------------------------------') # 字典的视图,会随着字典的变化而变化 key = dict1.keys() value = dict1.values() item = dict1.items() print('keys of dict1：', key) print('values of dict1：', value) print('items of dict1：', item) dict1['school']='szu' print('keys of dict1：', key) print('values of dict1：', value) print('items of dict1：', item) print('--------------------------------------') # 使用视图，遍历字典元素 print('遍历字典元素') for key in dict1.keys(): print('键:', key, '\t值:', dict1[key]) print('-------------') for key in dict1: print('键:', key, '\t值:', dict1[key]) print('-------------') for key,value in dict1.items(): print('键:', key, '\t值:', value) print('--------------------------------------') 测试结果：
dict1: {'name': '小明', 'sex': 'male', 'age': 18, 'high': 180} -------------------------------------- use dict and zip dict2: {'key1': '1', 'key2': '2', 'key3': '3'} ------------- dict2: {'key1': '1', 'key2': '2', 'key3': '3'} ------------- dict2: {'a': '1', 'b': '2', 'c': '3', 'd': '4', 'e': '5'} -------------------------------------- use dict dict3: {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'} ------------- dict3: {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'} ------------- dict3: {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'} ------------- dict3: {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'} -------------------------------------- use fromkeys dict4: {'语文': None, '数学': None, '英语': None} dict4: {'语文': 60, '数学': 60, '英语': 60} -------------------------------------- switch key and value of dict2: {'1': 'a', '2': 'b', '3': 'c', '4': 'd', '5': 'e'} -------------------------------------- length of dict1: 4 -------------------------------------- name is in dict1: True Name is in dict1: False -------------------------------------- get value by key(name), dict1: 小明 get value by key(name), dict1: 小明 get value by key(school), dict1: None get value by key(school), dict1: haha -------------------------------------- add key(score), dict1: {'name': '小明', 'sex': 'male', 'age': 18, 'high': 180, 'score': 100} add dict8 to dict1: {'name': '小明', 'sex': 'male', 'age': 18, 'high': 180, 'score': 100, 'country': 'china', 'city': 'Beijing'} modify value of key(score), dict1: {'name': '小明', 'sex': 'male', 'age': 18, 'high': 180, 'score': 80, 'country': 'china', 'city': 'Beijing'} modify values, dict1: {'name': '王四', 'sex': 'male', 'age': 40, 'high': 180, 'score': 80, 'country': 'china', 'city': 'Beijing'} set default value, dict1: {'name': '王四', 'sex': 'male', 'age': 40, 'high': 180, 'score': 80, 'country': 'china', 'city': 'Beijing'} set default value, dict1: {'name': '王四', 'sex': 'male', 'age': 40, 'high': 180, 'score': 80, 'country': 'china', 'city': 'Beijing', 'job': 'Stu'} -------------------------------------- delete key(score): {'name': '王四', 'sex': 'male', 'age': 40, 'high': 180, 'country': 'china', 'city': 'Beijing', 'job': 'Stu'} delete key(country): {'name': '王四', 'sex': 'male', 'age': 40, 'high': 180, 'city': 'Beijing', 'job': 'Stu'} delete the last key: {'name': '王四', 'sex': 'male', 'age': 40, 'high': 180, 'city': 'Beijing'} clear dict2: {} -------------------------------------- keys of dict1： dict_keys(['name', 'sex', 'age', 'high', 'city']) values of dict1： dict_values(['王四', 'male', 40, 180, 'Beijing']) items of dict1： dict_items([('name', '王四'), ('sex', 'male'), ('age', 40), ('high', 180), ('city', 'Beijing')]) keys of dict1： dict_keys(['name', 'sex', 'age', 'high', 'city', 'school']) values of dict1： dict_values(['王四', 'male', 40, 180, 'Beijing', 'szu']) items of dict1： dict_items([('name', '王四'), ('sex', 'male'), ('age', 40), ('high', 180), ('city', 'Beijing'), ('school', 'szu')]) -------------------------------------- 遍历字典元素 键: name 值: 王四 键: sex 值: male 键: age 值: 40 键: high 值: 180 键: city 值: Beijing 键: school 值: szu ------------- 键: name 值: 王四 键: sex 值: male 键: age 值: 40 键: high 值: 180 键: city 值: Beijing 键: school 值: szu ------------- 键: name 值: 王四 键: sex 值: male 键: age 值: 40 键: high 值: 180 键: city 值: Beijing 键: school 值: szu -------------------------------------- 集合 集合是一组无序的、不重复的元素，它的特性包括：
用大括号将元素括起来，元素之间有逗号隔开。 集合和字典的区别在于没有存储对应的value。 集合中各元素的值不可重复，所以集合可用于数据剔重。 集合中的元素只能是不可变的数据类型，包括整型、浮点型、字符串、元组，无法存储列表、字典、集合这些可变的数据类型。 样例代码：
# 创建集合/不可变集合 set1 = {'Beijing', 'Shanghai', 'Shenzhen', 'HongKong'} print('set1:', set1) set2 = set('hello') print('set2:', set2) set3 = set([1,2,3,4,5,6,5,3]) print('set3:', set3) set4 = set((1,2,3,4,5,6,6,1)) print('set4:', set4) fzset1 = frozenset('python') print('fset1:', fzset1) print('--------------------------------------') # 获取set的元素个数 print('length of set1：', len(set1)) print('--------------------------------------') # 由于集合的无序性，访问集合只能遍历 print('访问集合只能遍历') for elem in set1: print(elem, end=',') print('\n--------------------------------------') # 集合中添加和修改元素 set1.add('Chengdu') set1.add((1, 2)) print('set1:', set1) set8 = set([2, 3, 4]) set1.update(set8) print('set1:', set1) print('--------------------------------------') # 删除集合元素 set1.remove(2) print('delete set1:', set1) set1.discard(2) print('delete set1:', set1) set1.discard((1, 2)) print('delete set1:', set1) aaa = set1.pop() print('after pop, aaa:', aaa) print('after pop, set1:', set1) set2.clear() print('clear set2:', set2) print('--------------------------------------') # 判断集合中是否包含某元素 print('Beijing is in set1:', ('Beijing' in set1)) print('beijing is in set1:', ('beijing' in set1)) print('--------------------------------------') # 比较两个集合的关系,判断集合关系的操作符：==、!=、&lt;、&lt;=、>、>= print('set1 > set8:', (set1 > set8)) print('set3 = set4:', (set3 == set4)) print('--------------------------------------') # 集合的并集 set5 = set1 | set8 print('union of set1 and set8:', set5) set5 = set1.union(set8) print('union of set1 and set8:', set5) print('--------------------------------------') # 集合的交集 set5 = set1 &amp; set8 print('intersection of set1 and set8:', set5) set5 = set1.intersection(set8) print('intersection of set1 and set8:', set5) print('--------------------------------------') # 集合的差集 set5 = set1 - set8 print('difference of set1 and set8:', set5) set5 = set1.difference(set8) print('difference of set1 and set8:', set5) print('--------------------------------------') # 集合的对称差分:有所有属于集合A和集合B，并且不同时属于集合A和集合B的元素组成。 set5 = set1 ^ set8 print('symmetric difference of set1 and set8:', set5) set5 = set1.symmetric_difference(set8) print('symmetric difference of set1 and set8:', set5) print('--------------------------------------') 测试结果：
set1: {'Shenzhen', 'Shanghai', 'Beijing', 'HongKong'} set2: {'h', 'e', 'l', 'o'} set3: {1, 2, 3, 4, 5, 6} set4: {1, 2, 3, 4, 5, 6} fset1: frozenset({'y', 'h', 'n', 'p', 'o', 't'}) -------------------------------------- length of set1： 4 -------------------------------------- 访问集合只能遍历 Shenzhen,Shanghai,Beijing,HongKong, -------------------------------------- set1: {(1, 2), 'Shanghai', 'Shenzhen', 'Beijing', 'HongKong', 'Chengdu'} set1: {2, (1, 2), 3, 4, 'Shanghai', 'Shenzhen', 'Beijing', 'HongKong', 'Chengdu'} -------------------------------------- delete set1: {(1, 2), 3, 4, 'Shanghai', 'Shenzhen', 'Beijing', 'HongKong', 'Chengdu'} delete set1: {(1, 2), 3, 4, 'Shanghai', 'Shenzhen', 'Beijing', 'HongKong', 'Chengdu'} delete set1: {3, 4, 'Shanghai', 'Shenzhen', 'Beijing', 'HongKong', 'Chengdu'} after pop, aaa: 3 after pop, set1: {4, 'Shanghai', 'Shenzhen', 'Beijing', 'HongKong', 'Chengdu'} clear set2: set() -------------------------------------- Beijing is in set1: True beijing is in set1: False -------------------------------------- set1 > set8: False set3 = set4: True -------------------------------------- union of set1 and set8: {2, 3, 4, 'Shanghai', 'Shenzhen', 'Beijing', 'HongKong', 'Chengdu'} union of set1 and set8: {2, 3, 4, 'Shanghai', 'Shenzhen', 'Beijing', 'HongKong', 'Chengdu'} -------------------------------------- intersection of set1 and set8: {4} intersection of set1 and set8: {4} -------------------------------------- difference of set1 and set8: {'Shanghai', 'Shenzhen', 'Beijing', 'HongKong', 'Chengdu'} difference of set1 and set8: {'Shanghai', 'Shenzhen', 'Beijing', 'HongKong', 'Chengdu'} -------------------------------------- symmetric difference of set1 and set8: {2, 3, 'Shanghai', 'Shenzhen', 'Beijing', 'HongKong', 'Chengdu'} symmetric difference of set1 and set8: {2, 3, 'Shanghai', 'Shenzhen', 'Beijing', 'HongKong', 'Chengdu'} --------------------------------------</content></entry><entry><title>定制个人博客</title><url>https://jasmine617.github.io/post/setup-blog/</url><categories><category>CS</category></categories><tags><tag>GitHub Pages</tag><tag>Hugo</tag></tags><content type="html"> 昨天使用Hugo部署的网站框架里部署的还是themes带的样例页面。今天进行个性化定制，包括修改页面上的图片、链接等，并放入自己的博文。
需要修改的文件主要包括：
博文内容文件，在“D:\Hugo\myblog”下content文件夹下。 网站配置文件，在“D:\Hugo\myblog”下config文件夹下。 发布网站是用到的静态资源（如siderbar使用的头像图片），在主题目录下的静态资源文件夹“D:\Hugo\myblog\themes\hugo-theme-next\static”下。 如果自己加入的图片和原图的命名不同，就还需要根据实际修改相关的html文件，在主题目录下的布局文件夹“D:\Hugo\myblog\themes\hugo-theme-next\layouts”下。 本机启动Hugo server，下面的修改基本可以立即生效，方便一边修改一边验证。修改过程记录如下：
在“D:\Hugo\myblog\content”下放入自己写的博文。
注意：中文和英文的文章是分目录存放的。例如，中文博文放在“D:\Hugo\myblog\content\zh-CN\post”下。
post目录下原有的样例博文，可以直接删除，也可以通过设置draft属性为true来屏蔽。
博文中用到的图，我暂时放在post目录下了，md文件中的路径写的github上的URL。
逐一打开“D:\Hugo\myblog\config”下的配置文件，根据需要修改。
我实际只修改了“config.toml”、“languages”、“params.en.toml”和“params.zh-CN.toml”。
本地调试的时候，可以先改“development”子目录；调试完成需要同步修改“_default”子目录，否则Hugo发布的public站点文件还是错误的。
在“D:\Hugo\myblog\themes\hugo-theme-next\static\img”替换自己的图片。
该目录下是页面上的一些公共图片，例如siderbar的个人信息图片、博文下的QQ二维码、微信收款码等。
static下还有css、js文件夹，如果不修改页面样式，无需修改。
（可选）根据需要修改“D:\Hugo\myblog\themes\hugo-theme-next\layouts”下的页面组件html文件。
主要关注“D:\Hugo\myblog\themes\hugo-theme-next\layouts\partials”下的文件，通常有两种情况需要修改：
替换图片时，如果新文件和旧图片文件的名字不同，则将相关html中的link修改成新文件名。 修改页面显示内容。例如，我没有支付宝，就屏蔽了“D:\Hugo\myblog\themes\hugo-theme-next\layouts\partials\widgets\reward.html”中的支付宝收款二维码相关代码段。 将站点发布到GitHub。
清空public目录，再重新发布生成。
在站点根目录执行如下cmd命令：
$ hugo 进入"D:\Hugo\myblog\public"文件夹，鼠标右键选择“Git Bash Here”，进入Git Bash窗口，执行后续命令。
将文件提交到本机git库中。commit备注可以根据实际需要修改。
$ git add --all $ git commit -m "commit my own articles" 将站点提交到远程：
$ git push -u origin master</content></entry><entry><title>使用Hugo创建个人博客框架</title><url>https://jasmine617.github.io/post/setup-hugo/</url><categories><category>CS</category></categories><tags><tag>GitHub Pages</tag><tag>Hugo</tag></tags><content type="html"> 昨天跑通了如何使用GitHub Pages建了自己的第一个hello world页面，今天尝试使用Hugo来建一个完整的静态网站框架。
创建静态网站，用Jekyll、Hexo、Hugo等工具都可以，看了网上大家的分析，最终决定用Hugo来做。
这里先介绍如何安装Hugo、使用Hugo创建站点，并引入一个主题。按照本文操作完，站点的页面还是themes带的样例页面。我将在下一篇文章中总结如何加入自己的博文，以及修改网站的其他个人信息。
我的创建过程基本顺利，基本过程记录如下，遇到的小问题在最后单独说明：
打开Hugo下载页面，获取与本机环境相匹配的安装包。
例如，我下载的是：“hugo_0.89.4_Windows-64bit.zip”。
安装Hugo。
在本机建一个Hugo文件夹，为方便后续管理，在其下再建一个bin目录。
例如，我建的目录是“D:\Hugo\bin”。
将安装包拷贝到bin目录下并解压。
解压成功后，可以在bin目录下看到“hugo.exe”。
配置系统环境变量，为变量Path添加“hugo.exe”所在目录。
对于我来说，添加的是“D:\Hugo\bin”。
执行如下命令，如果能显示版本号，则说明安装成功。
$ hugo version hugo v0.89.4-AB01BA6E windows/amd64 BuildDate=2021-11-17T08:24:09Z VendorInfo=gohugoio 建立站点。
在Windows cmd窗口下进入Hugo文件夹。
注意这里是“D:\Hugo”，不是“D:\Hugo\bin”。
假设要创建的站点目录为“myblog”，则执行如下命令：
$ hugo new site myblog Congratulations! Your new Hugo site is created in D:\Hugo\myblog. Just a few more steps and you're ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the "hugo new theme &lt;THEMENAME>" command. 2. Perhaps you want to add some content. You can add single files with "hugo new &lt;SECTIONNAME>\&lt;FILENAME>.&lt;FORMAT>". 3. Start the built-in live server via "hugo server". Visit https://gohugo.io/ for quickstart guide and full documentation. 执行完成后，可以看到“D:\Hugo”下自动创建了一个“myblog”目录，且目录下包含如下内容：
文件夹/文件 说明 archetypes 存放default.md，头文件格式，每次新建文章默认显示的头部信息在此修改。 content 存放博客文章，markdown格式文件。 data 存放自定义或者导入的模板。 layouts 存放网站的数据模板。 static 存放图片、css、js等静态资源 themes 存放主题文件，每个主题都是一个独立的文件夹。 config.toml 网站配置文件。 下载themes。
访问Hugo主题页面，找一个自己喜欢的主题下载到上一步创建的“themes”文件夹下，并解压。
我这次下载的是NexT主题，它支持多设备显示自适应，同时支持评论、转发等博客需要的功能。
下载完成后，需要按照themes的说明做一些配置。对于我下载的主题，我按照要求把hugo-theme-next目录下的两个子目录config和content到站点根目录（即“D:\Hugo\myblog”）下。
在本地启动站点。
在站点根目录执行如下cmd命令：
$ hugo server Start building sites … hugo v0.89.4-AB01BA6E windows/amd64 BuildDate=2021-11-17T08:24:09Z VendorInfo=gohugoio | ZH-CN | EN -------------------+-------+----- Pages | 28 | 34 Paginator pages | 0 | 0 Non-page files | 8 | 0 Static files | 25 | 25 Processed images | 0 | 0 Aliases | 9 | 12 Sitemaps | 2 | 1 Cleaned | 0 | 0 Built in 42196 ms Watching for changes in D:\Hugo\myblog\{archetypes,content,data,layouts,static,themes} Watching for config changes in D:\Hugo\myblog\config.toml, D:\Hugo\myblog\config\_default, D:\Hugo\myblog\config\development Environment: "development" Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop hugo服务启动完成时，将出现与上面相类似的响应。
在浏览器中访问“http://localhost:1313/”，检查本地站点效果。
在cmd窗口中按Ctrl+C，停止Hugo服务。
发布需要提交到到GitHub的站点文件。
将站点的BaseURL配置为GitHub Pages主页地址。
待修改的文件包括“D:\Hugo\myblog\config.toml”、“D:\Hugo\myblog\config\development\config.toml”和“D:\Hugo\myblog\config_default\config.toml”，将BaseURL的值修改为“https://jasmine617.github.io/”。
发布站点。
在站点根目录执行如下cmd命令：
$ hugo hugo v0.89.4-AB01BA6E windows/amd64 BuildDate=2021-11-17T08:24:09Z VendorInfo=gohugoio | ZH-CN | EN -------------------+-------+----- Pages | 28 | 34 Paginator pages | 0 | 0 Non-page files | 8 | 0 Static files | 25 | 25 Processed images | 0 | 0 Aliases | 9 | 12 Sitemaps | 2 | 1 Cleaned | 0 | 0 Total in 42190 ms 发布成功，可以在“D:\Hugo\myblog\”下看到public文件夹。将这个文件夹发布到GitHub即可。
将站点发布到GitHub。
进入上一步创建的"D:\Hugo\myblog\public"文件夹，鼠标右键选择“Git Bash Here”，进入Git Bash窗口，执行后续命令。
初始化git库：
$ git init Reinitialized existing Git repository in D:/Hugo/myblog/public/.git/ 将文件提交到本机git库中。commit备注可以根据实际需要修改。
$ git add --all $ git commit -m "first commit of Hugo site" 检查本机git库是否已经提交成功。下例中的系统响应代表本地git库当前的分支名是master，并且本地已经没有需要commit的文件了。
$ git status On branch master Your branch is ahead of 'origin/master' by 1 commit. (use "git push" to publish your local commits) nothing to commit, working tree clean 使用如下命令，与远程GitHub公仓建立连接，并将站点提交到远程：
请根据自己的事情，修改GitHub仓库地址和本地分支名。
$ git remote add origin https://github.com/Jasmine617/jasmine617.github.io.git $ git push -u origin master Enumerating objects: 206, done. Counting objects: 100% (206/206), done. Delta compression using up to 8 threads Compressing objects: 100% (64/64), done. Writing objects: 100% (205/205), 194.83 KiB | 32.47 MiB/s, done. Total 205 (delta 90), reused 190 (delta 83), pack-reused 0 remote: Resolving deltas: 100% (90/90), done. To https://github.com/Jasmine617/jasmine617.github.io.git 5e8f0dc..8850953 master -> master Branch 'master' set up to track remote branch 'master' from 'origin'. 如果git操作不熟练，这里可能会出现关联远程仓库失败或者推送失败的情况。请根据错误提示，搜索解决方法。
检查GitHub Page。
在GitHub仓库中查看本地public目录下的文件是否都已上传。
我在实际操作时，前一天上传的index.html在远程GitHub上创建的是main分支，今天上传的文件创建的是master分支。并且main分支是默认分支。
而main分支实际没有用了，所以，可以先将默认分支修改为master，再删除main分支。
检查Pages设置是否正确。
前一天GitHub Pages的Source设置是main分支的根目录，需要检查修改为当前的master分支。
打开GitHub Pages页面，显示内容与本地访问“http://localhost:1313/”一致，则说明整个配置成功。</content></entry><entry><title>创建第一个GitHub Page</title><url>https://jasmine617.github.io/post/setup-helloworld/</url><categories><category>CS</category></categories><tags><tag>GitHub Pages</tag></tags><content type="html"> 如果想把自己日常的学习心得记录下来，可以创建一个个人博客网站。经过几天的研究比较，发现使用GitHub提供的Pages功能，可以满足基本要求。
参照网上的多个总结，今天完成了我自己个人博客首页的创建（虽然只是一个hello world）。
建议先花半天时间，看看廖雪峰大神的git总结和GitHub Pages官方文档，系统了解一下git、GitHub等的关系，以及GitHub Pages的创建方法，搞清楚背景知识，实际动手会更顺利。
我的创建过程还比较顺利，基本过程记录如下：
访问GitHub官网，注册账号并登录。
注册仅需要个人邮箱。
在Github上创建仓库。
这个仓库是计划给GitHub Pages用的，所以注意仓库名要和用户名一致；如果用户名中有大写字母，需要改为小写。
例如：jasmine617.github.io
在本机安装git。
参考：廖雪峰博客-安装git
注意：安装完git后，一定要配置用户名和邮箱，否则后续commit会报错。
在Git Bash中执行如下命令，name和email请根据实际情况替换：
$ git config --global user.name "Jasmine" $ git config --global user.email "123456@qq.com" 在本机生成SSH密钥，并配置到GitHub上。
配置密钥，是为了GitHub确认本机上传文件合法；如果不配置，后续将无法将文件push到GitHub上。
参考：廖雪峰博客-对接远程仓库
检查用户主目录（Windows环境为"C:\Users\yourusername"目录下是否存在".ssh"文件夹。如果不存在，需要生成公钥文件。
使用Git Bash执行，注意替换email：
$ ssh-keygen -t rsa -C "123456@qq.com" 再将公钥内容配置到GitHub中。
将GitHub上的仓库克隆到本地。
先在GitHub上获取仓库地址：
在本机创建一个文件夹，用于保存从公仓获取的文件，例如"D:\myplog"。打开该目录后鼠标右键选择“Git Bash Here”，进入Git Bash窗口，执行后续命令。
推荐使用SSH协议进行clone（请用从GitHub中拷贝的git仓库地址替换下例中的地址）：
$ git clone git@github.com:Jasmine617/jasmine617.github.io.git Cloning into 'jasmine617.github.io'... warning: You appear to have cloned an empty repository. 因为步骤2中创建的是一个空仓库，没有任何文件，上例的系统响应中有一个warning，无需理会。 如果使用HTTP协议，则为：
$ git clone https://github.com/Jasmine617/jasmine617.github.io.git 创建主页文件index.html，并提交到本机git库。
检查上一步中的"D:\myplog"文件夹，可以看到克隆成功后新增了一个文件夹"jasmine617.github.io"。
在新增的"jasmine617.github.io"文件夹下创建一个网页文件index.html，按html语法随便写一点内容。html样例如下：
&lt;!DOCTYPE html> &lt;html lang="en"> &lt;head> &lt;meta charset="UTF-8"> &lt;title>my first blog&lt;/title> &lt;/head> &lt;body> &lt;p>hello world&lt;/p> &lt;/body> &lt;/html> 在Git Bash中进入git库目录。将文件提交到本机git库中。commit备注可以根据实际需要修改。
$ cd jasmine617.github.io $ git add --all $ git commit -m "test commit index.html" 将index.html推送到GitHub公仓。
检查本机git库是否已经提交成功。下例中的系统响应代表本地git库当前的分支名是main，并且本地已经没有需要commit的文件了（即新创建的index.html已经成功提交到本机git版本库）。
$ git status On branch main Your branch is up to date with 'origin/main'. nothing to commit, working tree clean 使用如下命令将新增的index.html提交到GitHub公仓，其中main是上个命令中查询到的本机git分支名：
$ git push origin main Enumerating objects: 3, done. Counting objects: 100% (3/3), done. Delta compression using up to 8 threads Compressing objects: 100% (2/2), done. Writing objects: 100% (3/3), 338 bytes | 338.00 KiB/s, done. Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 To https://github.com/Jasmine617/jasmine617.github.io.git * [new branch] main -> main 检查GitHub Page。
首先在GitHub仓库中检查index.html文件是否已经存在。
再检查Pages设置是否正确。本例中index.html是上传仓库根目录下的，所以这里设置为root并保存。
打开GitHub Pages页面，如图显示则说明整个配置成功。</content></entry><entry><title>关于我</title><url>https://jasmine617.github.io/about.html</url><categories/><tags/><content type="html"> Hugo是用Go编写的一个开放源代码静态站点生成器，可在Apache许可证2.0下使用。 Hugo支持TOML, YAML和JSON数据文件类型，Markdown和HTML内容文件，并使用短代码添加丰富的内容。其他值得注意的功能包括分类法、多语言模式、图像处理、自定义输出格式、HTML/CSS/JS缩小和对Sass SCSS工作流的支持。
Hugo使用了多种开源项目，包括:
https://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper Hugo是博客、企业网站、创意作品集、在线杂志、单页应用程序甚至是数千页的网站的理想选择。
Hugo适合那些想要手工编写自己的网站代码，而不用担心设置复杂的运行时、依赖关系和数据库的人。
使用Hugo建立的网站非常快速、安全，可以部署在任何地方，包括AWS、GitHub Pages、Heroku、Netlify和任何其他托管提供商。
更多信息请访问GitHub.</content></entry></search>